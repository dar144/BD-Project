CREATE SCHEMA projekt;
SET SEARCH_PATH TO projekt;

-------------------------------------------------------------------------
-- function


CREATE OR REPLACE FUNCTION set_utworzono() RETURNS TRIGGER AS $$
BEGIN
    NEW.utworzono = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-------------------------------------------------------------------------
-- kraje


CREATE TABLE kraje (nazwa varchar(30) NOT NULL, utworzono timestamp) ;  
ALTER TABLE kraje ADD COLUMN id SERIAL PRIMARY KEY;

CREATE TRIGGER set_utworzono_on_insert_kraje
BEFORE INSERT ON kraje
FOR EACH ROW
EXECUTE PROCEDURE set_utworzono();

/// adding values to kraje table ///


-------------------------------------------------------------------------
-- autorzy 


CREATE TABLE autorzy (kraj_id int NOT NULL, imie varchar(30) NOT NULL, bio varchar(150), utworzono timestamp) ;
ALTER TABLE autorzy ADD COLUMN id SERIAL PRIMARY KEY;
ALTER TABLE autorzy ADD FOREIGN KEY (kraj_id) REFERENCES kraje (id);

CREATE TRIGGER set_utworzono_on_insert_autorzy
BEFORE INSERT ON autorzy
FOR EACH ROW
EXECUTE PROCEDURE set_utworzono();

-------------------------------------------------------------------------
-- uzytkownicy


CREATE TABLE uzytkownicy (kraj_id int NOT NULL, imie varchar(30) NOT NULL, utworzono timestamp) ;
ALTER TABLE uzytkownicy ADD COLUMN id SERIAL PRIMARY KEY;
ALTER TABLE uzytkownicy ADD FOREIGN KEY (kraj_id) REFERENCES kraje (id);

CREATE TRIGGER set_utworzono_on_insert_uzytkownicy
BEFORE INSERT ON uzytkownicy
FOR EACH ROW
EXECUTE PROCEDURE set_utworzono();

-------------------------------------------------------------------------
-- gatunki


CREATE TABLE gatunki (nazwa varchar(30) NOT NULL, utworzono timestamp) ;  
ALTER TABLE gatunki ADD COLUMN id SERIAL PRIMARY KEY;

CREATE TRIGGER set_utworzono_on_insert_gatunki
BEFORE INSERT ON gatunki
FOR EACH ROW
EXECUTE PROCEDURE set_utworzono();

/// adding values to gatunki table ///

-------------------------------------------------------------------------
-- albumy


CREATE TABLE albumy (autor_id int NOT NULL, nazwa varchar(30) NOT NULL, rok int NOT NULL, utworzono timestamp) ;
ALTER TABLE albumy ADD COLUMN id SERIAL PRIMARY KEY;
ALTER TABLE albumy ADD FOREIGN KEY (autor_id) REFERENCES autorzy (id);

CREATE TRIGGER set_utworzono_on_insert_albumy
BEFORE INSERT ON albumy
FOR EACH ROW
EXECUTE PROCEDURE set_utworzono();

-------------------------------------------------------------------------
-- piesni


CREATE TABLE piesni (album_id int NOT NULL, nazwa varchar(30) NOT NULL, ranking int NOT NULL, utworzono timestamp) ;
ALTER TABLE piesni ADD COLUMN id SERIAL PRIMARY KEY;
ALTER TABLE piesni ADD FOREIGN KEY (album_id) REFERENCES albumy (id);

CREATE TRIGGER set_utworzono_on_insert_piesni
BEFORE INSERT ON piesni
FOR EACH ROW
EXECUTE PROCEDURE set_utworzono();

-------------------------------------------------------------------------
-- widok


CREATE VIEW liczba_piesni_widok AS
SELECT albumy.autor_id as autor_id, count(*) as count
FROM piesni
inner join albumy on albumy.id = piesni.album_id
group by albumy.autor_id;

-------------------------------------------------------------------------
-- piesni_gatunki


CREATE TABLE piesni_gatunki ( piesn_id int NOT NULL, gatunek_id int NOT NULL) ;  
ALTER TABLE piesni_gatunki ADD COLUMN id SERIAL PRIMARY KEY;
ALTER TABLE piesni_gatunki ADD FOREIGN KEY (piesn_id) REFERENCES piesni (id);
ALTER TABLE piesni_gatunki ADD FOREIGN KEY (gatunek_id) REFERENCES gatunki (id);

-------------------------------------------------------------------------























































CREATE TABLE playlisty ( id int, nazwa varchar(30), utworzono timestamp, zaktualizowano timestamp) ;  
ALTER TABLE playlisty ADD PRIMARY KEY (id);




-------------------------------------------------------------------------

CREATE TYPE role_enum AS ENUM ('tworca', 'sluchacz');
CREATE TABLE uzytkownicy_playlisty ( id int, uzytkownik_id int, playlista_id int, rola ROLE_ENUM) ;  
ALTER TABLE uzytkownicy_playlisty ADD FOREIGN KEY (uzytkownik_id) REFERENCES uzytkownicy (id);
ALTER TABLE uzytkownicy_playlisty ADD FOREIGN KEY (playlista_id) REFERENCES playlisty (id);


CREATE TABLE playlisty_piesni ( id int, playlista_id int, piesn_id int) ;  
ALTER TABLE playlisty_piesni ADD FOREIGN KEY (playlista_id) REFERENCES playlisty (id);
ALTER TABLE playlisty_piesni ADD FOREIGN KEY (piesn_id) REFERENCES piesni (id);





CREATE TABLE autorzy_albumy ( id int, autor_id int, album_id int) ;  
ALTER TABLE autorzy_albumy ADD FOREIGN KEY (autor_id) REFERENCES autorzy (id);
ALTER TABLE autorzy_albumy ADD FOREIGN KEY (album_id) REFERENCES albumy (id);













