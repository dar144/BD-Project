CREATE SCHEMA projekt;
SET SEARCH_PATH TO projekt;

-------------------------------------------------------------------------
-- function


CREATE OR REPLACE FUNCTION set_utworzono() RETURNS TRIGGER AS $$
BEGIN
    NEW.utworzono = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-------------------------------------------------------------------------
-- kraje


CREATE TABLE kraje (nazwa varchar(30) NOT NULL, utworzono timestamp) ;  
ALTER TABLE kraje ADD COLUMN id SERIAL PRIMARY KEY;

CREATE TRIGGER set_utworzono_on_insert_kraje
BEFORE INSERT ON kraje
FOR EACH ROW
EXECUTE PROCEDURE set_utworzono();

/// adding values to kraje table ///


-------------------------------------------------------------------------
-- autorzy 


CREATE TABLE autorzy (kraj_id int NOT NULL, imie varchar(30) NOT NULL, bio varchar(150), utworzono timestamp) ;
ALTER TABLE autorzy ADD COLUMN id SERIAL PRIMARY KEY;
ALTER TABLE autorzy ADD FOREIGN KEY (kraj_id) REFERENCES kraje (id);

CREATE TRIGGER set_utworzono_on_insert_autorzy
BEFORE INSERT ON autorzy
FOR EACH ROW
EXECUTE PROCEDURE set_utworzono();

-------------------------------------------------------------------------
-- uzytkownicy


CREATE TABLE uzytkownicy (kraj_id int NOT NULL, imie varchar(30) NOT NULL, utworzono timestamp) ;
ALTER TABLE uzytkownicy ADD COLUMN id SERIAL PRIMARY KEY;
ALTER TABLE uzytkownicy ADD FOREIGN KEY (kraj_id) REFERENCES kraje (id);

CREATE TRIGGER set_utworzono_on_insert_uzytkownicy
BEFORE INSERT ON uzytkownicy
FOR EACH ROW
EXECUTE PROCEDURE set_utworzono();

-------------------------------------------------------------------------
-- gatunki


CREATE TABLE gatunki (nazwa varchar(30) NOT NULL, utworzono timestamp) ;  
ALTER TABLE gatunki ADD COLUMN id SERIAL PRIMARY KEY;

CREATE TRIGGER set_utworzono_on_insert_gatunki
BEFORE INSERT ON gatunki
FOR EACH ROW
EXECUTE PROCEDURE set_utworzono();

/// adding values to gatunki table ///

-------------------------------------------------------------------------
-- albumy


CREATE TABLE albumy (autor_id int NOT NULL, nazwa varchar(30) NOT NULL, rok int NOT NULL, utworzono timestamp) ;
ALTER TABLE albumy ADD COLUMN id SERIAL PRIMARY KEY;
ALTER TABLE albumy ADD FOREIGN KEY (autor_id) REFERENCES autorzy (id);

CREATE TRIGGER set_utworzono_on_insert_albumy
BEFORE INSERT ON albumy
FOR EACH ROW
EXECUTE PROCEDURE set_utworzono();

-------------------------------------------------------------------------
-- piesni


CREATE TABLE piesni (album_id int NOT NULL, nazwa varchar(30) NOT NULL, ranking int NOT NULL, utworzono timestamp) ;
ALTER TABLE piesni ADD COLUMN id SERIAL PRIMARY KEY;
ALTER TABLE piesni ADD FOREIGN KEY (album_id) REFERENCES albumy (id);

CREATE TRIGGER set_utworzono_on_insert_piesni
BEFORE INSERT ON piesni
FOR EACH ROW
EXECUTE PROCEDURE set_utworzono();

-------------------------------------------------------------------------
-- widok


CREATE VIEW liczba_piesni_widok AS
SELECT albumy.autor_id as autor_id, count(*) as count
FROM piesni
inner join albumy on albumy.id = piesni.album_id
group by albumy.autor_id;

-------------------------------------------------------------------------
-- piesni_gatunki


CREATE TABLE piesni_gatunki ( piesn_id int NOT NULL, gatunek_id int NOT NULL) ;  
ALTER TABLE piesni_gatunki ADD COLUMN id SERIAL PRIMARY KEY;
ALTER TABLE piesni_gatunki ADD FOREIGN KEY (piesn_id) REFERENCES piesni (id);
ALTER TABLE piesni_gatunki ADD FOREIGN KEY (gatunek_id) REFERENCES gatunki (id);

-------------------------------------------------------------------------
-- playlisty


CREATE TABLE playlisty (nazwa varchar(30) NOT NULL, utworzono timestamp) ; 
ALTER TABLE playlisty ADD COLUMN id SERIAL PRIMARY KEY; 

CREATE TRIGGER set_utworzono_on_insert_playlisty
BEFORE INSERT ON playlisty
FOR EACH ROW
EXECUTE PROCEDURE set_utworzono();

-------------------------------------------------------------------------
-- uzytkownicy_playlisty


CREATE TYPE role_enum AS ENUM ('tworca', 'sluchacz');
CREATE TABLE uzytkownicy_playlisty ( uzytkownik_id int NOT NULL, playlista_id int NOT NULL, rola ROLE_ENUM) ;
ALTER TABLE uzytkownicy_playlisty ADD COLUMN id SERIAL PRIMARY KEY; 
ALTER TABLE uzytkownicy_playlisty ADD FOREIGN KEY (uzytkownik_id) REFERENCES uzytkownicy (id);
ALTER TABLE uzytkownicy_playlisty ADD FOREIGN KEY (playlista_id) REFERENCES playlisty (id);

-------------------------------------------------------------------------
-- playlisty_piesni


CREATE TABLE playlisty_piesni ( playlista_id int NOT NULL, piesn_id int NOT NULL) ;  
ALTER TABLE uzytkownicy_playlisty ADD COLUMN id SERIAL PRIMARY KEY; 
ALTER TABLE playlisty_piesni ADD FOREIGN KEY (playlista_id) REFERENCES playlisty (id);
ALTER TABLE playlisty_piesni ADD FOREIGN KEY (piesn_id) REFERENCES piesni (id);



-------------------------------------------------------------------------
-- playlist_imie_widok


CREATE VIEW playlist_imie_widok AS
SELECT playlisty.id, playlisty.nazwa, uzytkownicy.imie FROM playlisty
JOIN uzytkownicy_playlisty ON playlisty.id = uzytkownicy_playlisty.playlista_id
JOIN uzytkownicy ON uzytkownicy.id = uzytkownicy_playlisty.uzytkownik_id
WHERE rola = 'tworca';

-------------------------------------------------------------------------
-- autor_piesn_widok


CREATE VIEW autor_piesn_widok AS
SELECT autorzy.id as autor_id, autorzy.imie, piesni.id as piesn_id, piesni.nazwa
FROM piesni
JOIN albumy ON piesni.album_id = albumy.id
JOIN autorzy ON albumy.autor_id = autorzy.id



SELECT apw.imie, apw.nazwa FROM projekt.playlisty_piesni pp
JOIN projekt.autor_piesn_widok apw ON apw.piesn_id = pp.piesn_id
WHERE playlista_id = 7;


SELECT * FROM projekt.piesni p
JOIN projekt.autor_piesn_widok apw ON apw.piesn_id = pp.piesn_id
WHERE NOT EXISTS 
( SELECT * FROM projekt.playlisty_piesni pp WHERE p.id = pp.piesn_id AND playlista_id = 8)


SELECT p.id, p.nazwa, apw.imie FROM projekt.piesni p
JOIN projekt.autor_piesn_widok apw ON apw.piesn_id = p.id
WHERE NOT EXISTS 
( SELECT * FROM projekt.playlisty_piesni pp WHERE p.id = pp.piesn_id AND playlista_id = 7)


